"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retrieveSourceMapURL = retrieveSourceMapURL;
exports.createSourceMapConsumer = createSourceMapConsumer;
exports.cachedCreateSourceMapConsumer = cachedCreateSourceMapConsumer;
exports.maybeRetrievePositionFromSourceMap = maybeRetrievePositionFromSourceMap;
const base64_js_1 = require("base64-js");
const error_stack_parser_1 = __importDefault(require("error-stack-parser"));
const source_map_1 = require("source-map");
let isSourceMapWarned = false;
function sourceMapWarn(message) {
    if (isSourceMapWarned) {
        return;
    }
    console.warn("cypress-cucumber-preprocessor: " + message);
    isSourceMapWarned = true;
}
const cache = new Map();
/**
 * Taken from https://github.com/evanw/node-source-map-support/blob/v0.5.21/source-map-support.js#L148-L177.
 */
function retrieveSourceMapURL(source) {
    let fileData;
    const xhr = new XMLHttpRequest();
    xhr.open("GET", source, /** async */ false);
    xhr.send(null);
    const { readyState, status } = xhr;
    if (readyState === 4 && status === 200) {
        fileData = xhr.responseText;
    }
    else {
        sourceMapWarn(`Unable to retrieve source map (readyState = ${readyState}, status = ${status})`);
        return;
    }
    const re = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/gm;
    // Keep executing the search to find the *last* sourceMappingURL to avoid
    // picking up sourceMappingURLs from comments, strings, etc.
    let lastMatch, match;
    while ((match = re.exec(fileData)))
        lastMatch = match;
    if (!lastMatch) {
        sourceMapWarn("Unable to find source mapping URL within the response. Are you bundling with source maps enabled?");
        return;
    }
    return lastMatch[1];
}
function createSourceMapConsumer(source) {
    const sourceMappingURL = retrieveSourceMapURL(source);
    if (!sourceMappingURL) {
        return;
    }
    const rawSourceMap = JSON.parse(new TextDecoder().decode((0, base64_js_1.toByteArray)(sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1))));
    // Why? Because of Vite. Vite fails building the source-map module properly and this errors with "x is not a constructor".
    if (typeof source_map_1.SourceMapConsumer !== "function") {
        return;
    }
    return new source_map_1.SourceMapConsumer(rawSourceMap);
}
function cachedCreateSourceMapConsumer(source) {
    if (cache.has(source)) {
        return cache.get(source);
    }
    else {
        const result = createSourceMapConsumer(source);
        cache.set(source, result);
        return result;
    }
}
function maybeRetrievePositionFromSourceMap() {
    const stack = error_stack_parser_1.default.parse(new Error());
    if (stack[0].fileName == null) {
        return;
    }
    const sourceMap = cachedCreateSourceMapConsumer(stack[0].fileName);
    if (!sourceMap) {
        return;
    }
    const relevantFrame = stack[3];
    const position = sourceMap.originalPositionFor({
        line: relevantFrame.getLineNumber(),
        column: relevantFrame.getColumnNumber(),
    });
    position.source = position.source.replace(/^webpack:\/\/\//, "");
    return position;
}
